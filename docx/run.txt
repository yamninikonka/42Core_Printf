Advantages of using .a files
----------------------------

General:
-------
you need either .o or .c files for the using the code implementation
of an project in another project.

Advantage of Static Files:
--------------------------
the static files combine the all the .o files of the
project and put in an .a{archive file} which is enough to use in other projects
compilation. Using static files is good project maintenance practice and more reliable.
What is needed to use the Project archive files in another Project:
project.a and project.h - [no need of source code]

Why .h:
-------
.h contains all the functions prototypes and definitions and macros
which are used as reference to pull from the .a file during linking
.a contains only functions implementations[main logic] and corresponding
variables etc.

Why Use .a Files (Static Libraries) Instead of Directly Compiling All Source Files Together?
-----------------------------------------
@Perplexity:
------------
Advantages of .a Files (Static Libraries)

Code Reusability:
-----------------
Static libraries allow you to reuse code across multiple projects or executables without recompiling the source every time.

Faster Builds:
--------------
Once the library is compiled, only changes to the library or its dependencies require recompilation.

Projects using the library do not need to recompile the libraryâ€™s source files unless they change.

Simplified Dependency Management:
---------------------------------
The main project only needs to link against the library, not manage all the source files and their dependencies.

Better Organization:
--------------------
Static libraries group related object files into a single file, making project management and distribution easier.

Security and Intellectual Property:
-----------------------------------
Libraries can be distributed as compiled .a files, hiding the implementation details from users who only need the headers.

Runtime Performance:
--------------------
Static libraries are linked at compile time, so all code is included in the executable. This can improve runtime performance (no dynamic linking overhead) and ensures all required code is available.

Standalone Executables:
-----------------------
Programs linked with static libraries are self-contained and do not require the library files at runtime, simplifying deployment
